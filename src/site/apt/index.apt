 ~~ The MIT License
 ~~
 ~~ Copyright (c) 2008 Kohsuke Kawaguchi and codehaus.org.
 ~~
 ~~ Permission is hereby granted, free of charge, to any person obtaining a copy
 ~~ of this software and associated documentation files (the "Software"), to deal
 ~~ in the Software without restriction, including without limitation the rights
 ~~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 ~~ copies of the Software, and to permit persons to whom the Software is
 ~~ furnished to do so, subject to the following conditions:
 ~~
 ~~ The above copyright notice and this permission notice shall be included in
 ~~ all copies or substantial portions of the Software.
 ~~
 ~~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ~~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ~~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ~~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ~~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 ~~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 ~~ THE SOFTWARE.
 ~~
 
 -----
 Animal Sniffer
 -----
 Stephen Connolly
 -----
 2009-09-28
 -----

What is animal-sniffer?

  What happens if you compile a program written with a version of an API that is different from the version you are 
  targetting? Well the answer depends on a number of things. 
  
    * Firstly we will assume that the API has an evolution contract, i.e., if a class or method or field
      is present in version v1, it will also be present in version v2 providing v1 <= v2. A good example of this is the 
      Java Runtime Library (a.k.a the JRE)
      
    * If you are compiling with a newer version of the API, you should not get any compiler errors.
    
    * If you are compiling with an older version of the API, and you have only used those features in the older version
      of the API, you should not get any compiler errors.
      
    * If you are compiling with an older version of the API, and you have used some features only available in the newer
      version, you will get a compiler error.
      
    []
    
  If you are developing a project which must support running on JDK version 1.4, but your development system does not 
  have a JDK version 1.4 available, it can be quite easy to accidentally use methods or classes that are only available
  in the newer version of the JDK.  For example, if you are develping a plugin for Maven 2.0.x on a Macintosh.

  If you are developing software designed to run against multiple versions of Java, or indeed multiple versions of any
  API, you may often run into a problem:
  
    * The new version has some cool feature that you would like to use.
    
    * You have to remain compatible with the old version.
   
    []
    
  Another issue that can often arise is:
  
    * You are compiling with a newer version of Java (e.g. Java 1.6) and by accident, you use one of the Java 1.6 only
      methods.
  

What is this?

    This project develops a set of tools to deal with problems common when
    dealing with multiple versions of JDKs. Currently, the following tools
    are available:
    
    * {{{cli.html}A command line tool to dump the class file version number}}.
      This helps you track down the offending jar file when you see
      <<<UnsupportedClassVersionError>>>.
    
    * {{{signature-checker.html}A maven plugin to verify that your code doesn't depend on new library
      classes/methods/fields introduced in later versions of JREs}}.
      This helps you ensure that your application runs on earlier versions of JREs
      even when you use newer versions of JDKs for development.
    
    []
    This simple command line tool looks at Java class files and determine
    the format version number. The common use case of this tool is to figure
    out what is the offending jar file when you see <<<UnsupportedClassVersionError>>>.

Usage

    This tool can accept any number of:

    * Class files

    * Jar files
    
    * Directories

    []
    
    When directories are given, they are recursively scanned for class files and jar files.
    When jar files are given, class files in it is examined.

    The tool produces output like the following, so use the grep command to filter out the list:

-----------------------------
% java -jar target/animal-sniffer-1.0-SNAPSHOT.jar tmp
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/AbstractCreator.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/AbstractCreatorProcessor.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/AbstractProcessor.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/AttributesHolder.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/FragmentedArray.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/MutableXMLStreamBuffer.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/XMLStreamBuffer.class
50.0 tmp/streambuffer-0.7.jar:com/sun/xml/stream/buffer/XMLStreamBufferException.class
-----------------------------

